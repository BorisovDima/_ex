
"""
Поиск начнается с локальных переменных, дальше идет поиск в объемлющих функциях в локальных переменных окружающих функции, 
которые у текущей функции сохранены в __closure__, дальше ищем в глобальных переменных globals(), func.__globals__, и потом
в builtins 

"пример \/"
 
"""
####################### ЗАмыкание ####################
#Захватывает только те переменные внутри замыкания, которые ему нужны, не оставляет ссылку на обьемлющую функцию
a = 'I global'
I_var = 1


def wrap(c='I will be in closure'):
    # Локальные переменные разрешаются статически,
    # функция знает все свои локальные переменные, но им еще ничего не присвоено, поэтому ошибка
    print(I_var)
    #I_var = 2

    list_func = []
    for i in range(4):
        def var_store(): # Замыкает переменную i, в замыкание сохраняет не значение i, а то место где i хранится, поэтому везде 4
            print(i)
        list_func.append(var_store)

    def close():
        """
        Внутри функции разрешение имен статическое. тоесть, когда у нас есть вложенные функции нам нужно определить
        что у нас лежит в замыкании, так как мы замыкаемся не на все локалс объемлющей функции, а только определенные
        во вложенной функции "print(a)". Для этого нам надо знать, какие имена объемлющей функции определены
        ( тоесть функции известны все имена, но если им еще ничего не присвоено, то они empty )
        """
        s = 12
        print(a) # Статически разрешается, замыкание знает о переменной (empty). Записывается в __closure__

    #close()    variable 'a' referenced before assignment in enclosing scope
    print(close.__closure__) # а еще пустая
    a = c
    print(close.__closure__)

    return close, list_func

close, funcs = wrap()
funcs[-1]() # Запонили где переменная хранится, а не ее значение

print(40 * '_')

close2, _ = wrap('HEllo') #новую функцию ложим на стэк
print(id(close), id(close2))
close2(), close()

print(close.__closure__) # Замыкания
print(id(wrap.__globals__), 'GLOB')
################## locals ###############3

def loc():
    local_var = 1
    print(locals())

print(id(loc.__globals__), 'GLOB')
print(loc.__globals__) # У каждой функции ссылка на глобалс


################## globals #############
print(globals())
################## __builtins__ ##################
print(globals()['__builtins__'])